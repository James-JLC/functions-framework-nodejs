@startuml OpenFunction in Sync Runtime

box Function Process in Local Environment or Container
control ENTRYPOINT
participant Main
participant Server
participant Express [
  Web Server
  ----
  ""Express""
]
participant "User Function" as UserFunction
participant DaprClient
end box

entity "Dapr Sidecar " as DaprSidecar

== OpenFunction Serving ==

ENTRYPOINT -> Main ** : execute
note over ENTRYPOINT, Main: Pass through __CLI arguments__ and \ncontainer __environment variables__

Main -> Main : load user function file
note left: ""function (ctx, data)"" 

Main -> Server ** : create
note over Main, Server: Hand over __user function__, __function type__ \nand __context__ parsed from env variables 

Server -> Express ** : new

Server -> UserFunction ** : wrap user function in ""function (req, res)""
note over Server, UserFunction: Use Node.js ""Domain"" to run function and catch exceptions  
Server -> Express : bind wrapper to "/*" route

...

== OpenFunction Invocation ==

[-> Express ++ : HTTP request to "/"

Express -> UserFunction ++ : execute user function


alt output to Dapr
  UserFunction -> DaprClient ** : new

  loop each OpenFunction Output 
    UserFunction -> DaprClient ++ : send "data" asynchronously

    DaprClient -> DaprSidecar ++ : invoke binding \nor pub with "data"
    DaprSidecar --> DaprClient -- : return result 

  end

  UserFunction -> DaprClient !!
end

alt response via Express
  UserFunction -> UserFunction : invoke ""ctx.res"" \n(and ""ctx.req"") methods 
end

UserFunction --> Express -- : wrapper ends response

[<- Express -- : send response

...

@enduml
